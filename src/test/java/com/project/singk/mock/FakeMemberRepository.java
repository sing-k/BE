package com.project.singk.mock;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import com.project.singk.domain.member.domain.Member;
import com.project.singk.domain.member.service.port.MemberRepository;
import com.project.singk.global.api.ApiException;
import com.project.singk.global.api.AppHttpStatus;

public class FakeMemberRepository implements MemberRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<Member> data = Collections.synchronizedList(new ArrayList<>());
	@Override
	public Member save(Member member) {
		if (member.getId() == null || member.getId() == 0) {
			Member newMember = Member.builder()
				.id(autoGeneratedId.incrementAndGet())
				.email(member.getEmail())
				.password(member.getPassword())
				.imageUrl(member.getImageUrl())
				.nickname(member.getNickname())
				.name(member.getName())
				.gender(member.getGender())
				.birthday(member.getBirthday())
				.role(member.getRole())
				.build();
			data.add(newMember);
			return newMember;
		} else {
			data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
			data.add(member);
			return member;
		}
	}

    @Override
    public List<Member> saveAll(List<Member> members) {
        return members.stream().map(this::save).toList();
    }

    @Override
	public Member getById(Long id) {
		return findById(id).orElseThrow(() -> new ApiException(AppHttpStatus.NOT_FOUND_MEMBER));
	}

	@Override
	public Member getByEmail(String email) {
		return findByEmail(email).orElseThrow(() -> new ApiException(AppHttpStatus.NOT_FOUND_MEMBER));
	}

    @Override
    public List<Member> findAll() {
        return data;
    }

    @Override
	public Optional<Member> findById(Long id) {
		return data.stream().filter(item -> item.getId().equals(id)).findAny();
	}

	@Override
	public Optional<Member> findByEmail(String email) {
		return data.stream().filter(item -> item.getEmail().equals(email)).findAny();
	}

	@Override
	public boolean existsByEmail(String email) {
		return data.stream().anyMatch(item -> item.getEmail().equals(email));
	}

	@Override
	public boolean existsByNickname(String nickname) {
		return data.stream().anyMatch(item -> item.getNickname().equals(nickname));
	}

    @Override
    public void deleteById(Long memberId) {
        data.removeIf(item -> item.getId().equals(memberId));
    }
}
