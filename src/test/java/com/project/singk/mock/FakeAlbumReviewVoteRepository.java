package com.project.singk.mock;

import com.project.singk.domain.member.domain.Member;
import com.project.singk.domain.review.domain.AlbumReview;
import com.project.singk.domain.vote.domain.AlbumReviewVote;
import com.project.singk.domain.vote.service.port.AlbumReviewVoteRepository;
import com.project.singk.global.api.ApiException;
import com.project.singk.global.api.AppHttpStatus;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAlbumReviewVoteRepository implements AlbumReviewVoteRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<AlbumReviewVote> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public AlbumReviewVote save(AlbumReviewVote albumReviewVote) {
        if (albumReviewVote.getId() == null || albumReviewVote.getId() == 0) {
            AlbumReviewVote newAlbumReviewVote = AlbumReviewVote.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .type(albumReviewVote.getType())
                    .albumReview(albumReviewVote.getAlbumReview())
                    .member(albumReviewVote.getMember())
                    .member(albumReviewVote.getMember())
                    .build();
            data.add(newAlbumReviewVote);
            return newAlbumReviewVote;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), albumReviewVote.getId()));
            data.add(albumReviewVote);
            return albumReviewVote;
        }
    }

    @Override
    public AlbumReviewVote getById(Long id) {
        return findById(id).orElseThrow(() -> new ApiException(AppHttpStatus.NOT_FOUND_ALBUM_REVIEW));
    }

    @Override
    public AlbumReviewVote getByMemberAndAlbumReview(Member member, AlbumReview albumReview) {
        return findByMemberAndAlbumReview(member, albumReview)
                .orElseThrow(() -> new ApiException(AppHttpStatus.NOT_FOUND_ALBUM_REVIEW_VOTE));
    }

    @Override
    public Optional<AlbumReviewVote> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<AlbumReviewVote> findByMemberAndAlbumReview(Member member, AlbumReview albumReview) {
        return data.stream().filter(item ->
                item.getMember().getId().equals(member.getId()) &&
                item.getAlbumReview().getId().equals(albumReview.getId()))
                .findAny();
    }

    @Override
    public boolean existsByMemberAndAlbumReview(Member member, AlbumReview albumReview) {
        return data.stream().anyMatch(item ->
                item.getMember().getId().equals(member.getId()) &&
                item.getAlbumReview().getId().equals(albumReview.getId()));
    }

    @Override
    public void delete(AlbumReviewVote albumReviewVote) {
        data.removeIf(item -> item.getId().equals(albumReviewVote.getId()));
    }

}
