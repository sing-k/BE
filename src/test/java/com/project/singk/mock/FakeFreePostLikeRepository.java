package com.project.singk.mock;

import com.project.singk.domain.like.domain.FreePostLike;
import com.project.singk.domain.like.service.port.FreePostLikeRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeFreePostLikeRepository implements FreePostLikeRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<FreePostLike> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public FreePostLike save(FreePostLike freePostLike) {
        if (freePostLike.getId() == null || freePostLike.getId() == 0) {
            FreePostLike newfreepostLike = FreePostLike.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .post(freePostLike.getPost())
                    .member(freePostLike.getMember())
                    .build();
            data.add(newfreepostLike);
            return newfreepostLike;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), freePostLike.getId()));
            data.add(freePostLike);
            return freePostLike;
        }
    }

    @Override
    public Optional<FreePostLike> findByMemberIdAndPostId(Long memberId, Long postId) {
        return data.stream()
                .filter(item -> item.getMember().getId().equals(memberId) && item.getPost().getId().equals(postId))
                .findAny();
    }

    @Override
    public boolean existsByMemberIdAndPostId(Long memberId, Long postId) {
        return data.stream()
                .anyMatch(item -> item.getMember().getId().equals(memberId) && item.getPost().getId().equals(postId));
    }

    @Override
    public void deleteById(Long likeId) {
        data.removeIf(item -> item.getId().equals(likeId));
    }


}
