package com.project.singk.mock;

import com.project.singk.domain.like.domain.FreeCommentLike;
import com.project.singk.domain.like.service.port.FreeCommentLikeRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeFreeCommentLikeRepository implements FreeCommentLikeRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<FreeCommentLike> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public FreeCommentLike save(FreeCommentLike freeCommentLike) {
        if (freeCommentLike.getId() == null || freeCommentLike.getId() == 0) {
            FreeCommentLike newFreeCommentLike = FreeCommentLike.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .comment(freeCommentLike.getComment())
                    .member(freeCommentLike.getMember())
                    .build();
            data.add(newFreeCommentLike);
            return newFreeCommentLike;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), freeCommentLike.getId()));
            data.add(freeCommentLike);
            return freeCommentLike;
        }
    }

    @Override
    public Optional<FreeCommentLike> findByMemberIdAndCommentId(Long memberId, Long commentId) {
        return data.stream()
                .filter(item -> item.getMember().getId().equals(memberId) && item.getComment().getId().equals(commentId))
                .findAny();
    }

    @Override
    public boolean existsByMemberIdAndCommentId(Long memberId, Long commentId) {
        return data.stream()
                .anyMatch(item -> item.getMember().getId().equals(memberId) && item.getComment().getId().equals(commentId));
    }

    @Override
    public void deleteById(Long likeId) {
        data.removeIf(item -> item.getId().equals(likeId));
    }

}
