package com.project.singk.mock;

import com.project.singk.domain.alarm.domain.Alarm;
import com.project.singk.domain.alarm.service.port.AlarmRepository;
import com.project.singk.domain.post.controller.request.PostSort;
import com.project.singk.domain.post.domain.FreePost;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;


public class FakeAlarmRepository implements AlarmRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Alarm> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Alarm save(Alarm alarm){
        if(alarm.getId() == null || alarm.getId() == 0){
            Alarm newAlarm = Alarm.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .targetId(alarm.getTargetId())
                    .type(alarm.getType())
                    .sender(alarm.getSender())
                    .receiver(alarm.getReceiver())
                    .isRead(alarm.isRead())
                    .createdAt(alarm.getCreatedAt())
                    .build();
            data.add(newAlarm);
            return newAlarm;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), alarm.getId()));
            data.add(alarm);
            return alarm;
        }
    }

    @Override
    public Page<Alarm> findAllByMemberId(Long memberId, int offset, int limit) {
        List<Alarm> alarms = data.stream()
                .sorted(Comparator.comparing(Alarm::getCreatedAt).reversed())
                .filter(item -> item.getReceiver().getId().equals(memberId))
                .limit(limit)
                .skip(offset)
                .toList();

        Pageable pageable = PageRequest.ofSize(limit);

        return new PageImpl<>(
                alarms,
                pageable,
                data.stream()
                        .filter(item -> item.getReceiver().getId().equals(memberId))
                        .count()
        );
    }

    @Override
    public void deleteById(Long id){
        data.removeIf(item -> Objects.equals(item.getId(),id));
    }

    @Override
    public Long countIsReadFalseByMemberId(Long memberId) {
        return data.stream()
                .filter(item -> item.getReceiver().getId().equals(memberId) && !item.isRead())
                .count();
    }
}
