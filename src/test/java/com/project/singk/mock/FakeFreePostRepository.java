package com.project.singk.mock;

import com.project.singk.domain.post.controller.request.FilterSort;
import com.project.singk.domain.post.controller.request.PostSort;
import com.project.singk.domain.post.domain.FreePost;
import com.project.singk.domain.post.service.port.FreePostRepository;
import com.project.singk.global.api.ApiException;
import com.project.singk.global.api.AppHttpStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.util.StringUtils;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeFreePostRepository implements FreePostRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<FreePost> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public FreePost save(FreePost freePost) {
        if (freePost.getId() == null || freePost.getId() == 0) {
            FreePost newFreePost = FreePost.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(freePost.getTitle())
                    .content(freePost.getContent())
                    .likes(freePost.getLikes())
                    .comments(freePost.getComments())
                    .member(freePost.getMember())
                    .createdAt(freePost.getCreatedAt())
                    .modifiedAt(freePost.getModifiedAt())
                    .build();
            data.add(newFreePost);
            return newFreePost;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), freePost.getId()));
            data.add(freePost);
            return freePost;
        }
    }

    @Override
    public List<FreePost> saveAll(List<FreePost> post) {
        return post.stream().map(this::save).toList();
    }

    @Override
    public FreePost getById(Long id) {
        return findById(id).orElseThrow(() -> new ApiException(AppHttpStatus.NOT_FOUND_POST));
    }

    @Override
    public Optional<FreePost> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Page<FreePost> findAll(int offset, int limit, String sort, String filter, String keyword) {
        List<FreePost> posts = data.stream()
                .sorted(order(PostSort.valueOf(sort)))
                .filter(item -> search(item, filter, keyword))
                .limit(limit)
                .skip(offset)
                .toList();

        Pageable pageable = PageRequest.ofSize(limit);

        return new PageImpl<>(
                posts,
                pageable,
                data.stream()
                        .filter(item -> search(item, filter, keyword))
                        .count()
        );
    }

    @Override
    public Page<FreePost> findAllByMemberId(Long memberId, int offset, int limit) {
        List<FreePost> posts = data.stream()
                .sorted(order(PostSort.LATEST))
                .filter(item -> item.getMember().getId().equals(memberId))
                .limit(limit)
                .skip(offset)
                .toList();

        Pageable pageable = PageRequest.ofSize(limit);

        return new PageImpl<>(
                posts,
                pageable,
                data.stream()
                        .filter(item -> item.getMember().getId().equals(memberId))
                        .count()
        );
    }

    @Override
    public void deleteById(Long postId) {
        data.removeIf(item -> item.getId().equals(postId));
    }

    private Comparator<FreePost> order(PostSort sort) {
        return switch (sort) {
            case LATEST -> Comparator.comparing(FreePost::getCreatedAt).reversed();
            case LIKES -> Comparator.comparing(FreePost::getLikes).reversed();
        };
    }
    private boolean search(FreePost post, String filter, String keyword) {
        if (!StringUtils.hasText(filter) || !StringUtils.hasText(keyword)) return true;

        FilterSort filterSort = FilterSort.valueOf(filter);

        return switch (filterSort) {
            case TITLE -> post.getTitle().contains(keyword);
            case CONTENT -> post.getContent().contains(keyword);
            case WRITER -> post.getMember().getNickname().contains(keyword);
        };
    }
}
