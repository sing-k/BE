package com.project.singk.mock;

import com.project.singk.domain.review.domain.AlbumReview;
import com.project.singk.domain.review.service.port.AlbumReviewRepository;
import com.project.singk.global.api.ApiException;
import com.project.singk.global.api.AppHttpStatus;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAlbumReviewRepository implements AlbumReviewRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<AlbumReview> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public AlbumReview save(AlbumReview albumReview) {
        if (albumReview.getId() == null || albumReview.getId() == 0) {
            AlbumReview newAlbumReview = AlbumReview.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .content(albumReview.getContent())
                    .score(albumReview.getScore())
                    .prosCount(albumReview.getProsCount())
                    .consCount(albumReview.getConsCount())
                    .album(albumReview.getAlbum())
                    .writer(albumReview.getWriter())
                    .build();
            data.add(newAlbumReview);
            return newAlbumReview;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), albumReview.getId()));
            data.add(albumReview);
            return albumReview;
        }
    }

    @Override
    public AlbumReview getById(Long id) {
        return findById(id).orElseThrow(() -> new ApiException(AppHttpStatus.NOT_FOUND_ALBUM_REVIEW));
    }

    @Override
    public Optional<AlbumReview> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

}
