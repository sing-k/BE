package com.project.singk.mock;

import com.project.singk.domain.like.domain.RecommendPostLike;
import com.project.singk.domain.like.service.port.RecommendPostLikeRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRecommendPostLikeRepository implements RecommendPostLikeRepository {
	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<RecommendPostLike> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public RecommendPostLike save(RecommendPostLike recommendPostLike) {
        if (recommendPostLike.getId() == null || recommendPostLike.getId() == 0) {
            RecommendPostLike newRecommendPostLike = RecommendPostLike.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .post(recommendPostLike.getPost())
                    .member(recommendPostLike.getMember())
                    .build();
            data.add(newRecommendPostLike);
            return newRecommendPostLike;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), recommendPostLike.getId()));
            data.add(recommendPostLike);
            return recommendPostLike;
        }
    }

    @Override
    public Optional<RecommendPostLike> findByMemberIdAndPostId(Long memberId, Long postId) {
        return data.stream()
                .filter(item -> item.getMember().getId().equals(memberId) && item.getPost().getId().equals(postId))
                .findAny();
    }

    @Override
    public boolean existsByMemberIdAndPostId(Long memberId, Long postId) {
        return data.stream()
                .anyMatch(item -> item.getMember().getId().equals(memberId) && item.getPost().getId().equals(postId));
    }

    @Override
    public void deleteById(Long likeId) {
        data.removeIf(item -> item.getId().equals(likeId));
    }

}
